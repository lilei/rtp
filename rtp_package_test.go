package RTP

import (
	"testing"
)

func TestParseRtpHeader(t *testing.T) {
	buf := []byte{
		0x80, 0x89, 0x0b, 0xf0, 0x4e, 0x53, 0x2e, 0xef,
		0x79, 0xdc, 0x19, 0xbb, 0xde, 0x7a, 0xf7, 0xf0,
		0xf7, 0x2e, 0xea, 0xef, 0xf0, 0xb0, 0xb1, 0xf5,
		0xf7, 0xba, 0xde, 0x9c, 0xde, 0xdc, 0x9f, 0xf8,
		0xf8, 0xb8, 0xfb, 0xfb, 0x9f, 0xf4, 0xf6, 0xdf,
		0xf4, 0xf9, 0x79, 0xf9, 0xb9, 0xb7, 0xdb, 0x9b,
		0xf7, 0xdf, 0xf9, 0x79, 0xfb, 0xbb, 0xfb, 0xf9,
		0xb7, 0xf7, 0xf9, 0xf9, 0x79, 0xbb, 0xdf, 0xf6,
		0xb9, 0xf6, 0xf9, 0xf7, 0xb5, 0xf9, 0xfb, 0xf9,
		0xf9, 0x76, 0xb4, 0xf3, 0xf5, 0xb7, 0xf6, 0xf9,
		0x77, 0x9b, 0xf9, 0xdd, 0xf7, 0xfb, 0x9f, 0xfb,
		0xfb, 0xf9, 0x5f, 0xb9, 0xf9, 0x9f, 0xf4, 0xf7,
		0xf7, 0xf5, 0x79, 0xfb, 0x9f, 0xf7, 0xf5, 0xb5,
		0x77, 0xf9, 0xb9, 0x79, 0xb9, 0xf5, 0xf3, 0xf9,
		0x7b, 0xdd, 0xb7, 0xf9, 0xf7, 0xfb, 0xf9, 0x5f,
		0xf7, 0xfb, 0xbb, 0xf9, 0x9f, 0xdf, 0xf9, 0x79,
		0xf4, 0x79, 0xb6, 0x9a, 0xf4, 0xfb, 0xdf, 0xf6,
		0x74, 0xf3, 0xdd, 0xf7, 0xbb, 0xf7, 0xbb, 0xf5,
		0xf5, 0xf5, 0x79, 0xf9, 0xb9, 0xdd, 0xb5, 0xf9,
		0xf9, 0x7b, 0xdf, 0xf9, 0xb6, 0xfb, 0xfb, 0xb9,
		0x79, 0x9f, 0xf6, 0xfb, 0xf6, 0x76, 0x9f, 0xf9,
		0xdd, 0x7b, 0xbb, 0xdf,
	}

	head := ParseRtpHeader(buf)

	if head.Version != 2 {
		t.Error("parse RTP Header error:Version")
	}
	if head.Padding != 0 {
		t.Error("parse RTP Header error:padding")
	}
	if head.Extension != 0 {
		t.Error("parse RTP Header error:extension")
	}
	if head.Cc != 0 {
		t.Error("parse RTP Header error:cc")
	}
	if head.Marker != 1 {
		t.Error("parse RTP Header error:marker")
	}
	if head.PayloadType != 9 {
		t.Error("parse RTP Header error:pt")
	}
	if head.Sequence != 3056 {
		t.Error("parse RTP Header error:sequence")
	}
	if head.TimeStamp != 1314074351 {
		t.Error("parse RTP Header error:timestamp")
	}
	if head.SSRC != 2044467643 {
		t.Error("parse RTP Header error:ssrc")
	}
}
