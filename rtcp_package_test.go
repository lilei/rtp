package RTP

import (
	"testing"
)

func TestParseRtcpHeader(t *testing.T) {
	buf := []byte{
		0x80, 0xc8, 0x00, 0x06, 0x79, 0xdc, 0x19, 0xbb,
		0xdb, 0xb0, 0x96, 0x1e, 0x2d, 0x07, 0x42, 0x14,
		0x61, 0x76, 0xb9, 0x4f, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x81, 0xca, 0x00, 0x06,
		0x79, 0xdc, 0x19, 0xbb, 0x01, 0x10, 0x2b, 0x76,
		0x4e, 0x2f, 0x30, 0x66, 0x65, 0x55, 0x32, 0x64,
		0x35, 0x6f, 0x68, 0x65, 0x6d, 0x38, 0x00, 0x00,
	}

	head := ParseRtcpHeader(buf)

	if head.Version != 2 {
		t.Error("parse RTP Header error:Version")
	}
	if head.Padding != 0 {
		t.Error("parse RTP Header error:padding")
	}
	if head.RC != 0 {
		t.Error("parse RTP Header error:RC")
	}
	if head.PayloadType != 200 {
		t.Error("parse RTP Header error:pt")
	}
	if head.length != 6 {
		t.Error("parse RTP Header error:length")
	}
}

func TestParseRtcpHeader1(t *testing.T) {
	buf := []byte{
		0x81, 0xc8, 0x00, 0x0c, 0x40, 0xc9, 0x33, 0xe8,
		0xdb, 0xb0, 0x96, 0x21, 0x85, 0xf8, 0xe3, 0xac,
		0x4e, 0x53, 0x96, 0xda, 0x00, 0x00, 0x00, 0x8c,
		0x00, 0x00, 0x57, 0x80, 0x79, 0xdc, 0x19, 0xbb,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x7f,
		0x00, 0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x81, 0xca, 0x00, 0x06,
		0x40, 0xc9, 0x33, 0xe8, 0x01, 0x10, 0x5a, 0x49,
		0x50, 0x67, 0x61, 0x47, 0x68, 0x53, 0x45, 0x56,
		0x4f, 0x30, 0x70, 0x41, 0x6a, 0x35, 0x00, 0x00,
		0x83, 0xcd, 0x00, 0x04, 0x40, 0xc9, 0x33, 0xe8,
		0x00, 0x00, 0x00, 0x00, 0x79, 0xdc, 0x19, 0xbb,
		0x00, 0xfa, 0x00, 0x00,
	}

	head := ParseRtcpHeader(buf)

	if head.Version != 2 {
		t.Error("parse RTP Header error:Version")
	}
	if head.Padding != 0 {
		t.Error("parse RTP Header error:padding")
	}
	if head.RC != 1 {
		t.Error("parse RTP Header error:RC")
	}
	if head.PayloadType != 200 {
		t.Error("parse RTP Header error:pt")
	}
	if head.length != 12 {
		t.Error("parse RTP Header error:length")
	}
}

func TestParseRtcpHeaderBye(t *testing.T) {
	buf := []byte{
		0x81, 0xcb, 0x00, 0x01, 0x40, 0xc9, 0x33, 0xe8,
		0x83, 0xcd, 0x00, 0x04, 0x40, 0xc9, 0x33, 0xe8,
		0x00, 0x00, 0x00, 0x00, 0x79, 0xdc, 0x19, 0xbb,
		0x01, 0x77, 0x00, 0x00, 0x84, 0xcd, 0x00, 0x02,
		0x40, 0xc9, 0x33, 0xe8, 0x00, 0x00, 0x00, 0x00,
	}

	head := ParseRtcpHeader(buf)

	if head.Version != 2 {
		t.Error("parse RTP Header error:Version")
	}
	if head.Padding != 0 {
		t.Error("parse RTP Header error:padding")
	}
	if head.RC != 1 {
		t.Error("parse RTP Header error:RC")
	}
	if head.PayloadType != 203 {
		t.Error("parse RTP Header error:pt")
	}
	if head.length != 1 {
		t.Error("parse RTP Header error:length")
	}
}
